# -*- coding: utf-8 -*-
"""GBPUSD H4 BB AI.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1mWfFQVCe6Jgc_MiPKNlxTd5jlXDM9yOZ
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import os
import time
import keras
from sklearn.preprocessing import MinMaxScaler, LabelEncoder
from sklearn.model_selection import train_test_split
import tensorflow as tf
from keras.models import Sequential
from keras.layers import Dense, Activation, LSTM, Dropout
from tensorflow.keras import optimizers
from tensorflow.keras.optimizers import Adam, SGD
from keras.metrics import sparse_categorical_crossentropy
from sklearn.preprocessing import MinMaxScaler
from flask import Flask, request, render_template

df = pd.read_csv('https://firebasestorage.googleapis.com/v0/b/mt5-remote-trade-copier.appspot.com/o/trades%2FFOREX%20AI%20DATA%2FGBPUSD%202017-2022.csv?alt=media&token=efe9bc05-3c61-409e-b8fb-37c3439ee6c3')
df.index = df['Time']
df = df.drop(columns=['Time'])




le = LabelEncoder()
le.fit(['HOLD', 'BUY', 'SELL'])

scaler = MinMaxScaler()

#df = pd.get_dummies(df, columns=['Signal'], prefix='S')
X  = df.drop(columns=['Signal'])
Y  = tf.keras.utils.to_categorical(le.fit_transform(df['Signal']), num_classes=3)

X = scaler.fit_transform(X)
len(Y)

split = int(len(X) * 0.8)
X_train = X[:split]
X_test  = X[split:len(X)]
Y_train = Y[:split]
Y_test  = Y[split:len(Y)]

X_train

model = Sequential([
      Dense(8, input_shape=(7,), activation='tanh'),
      Dropout(0.2),
      Dense(10, activation='tanh'),
      Dropout(0.2),
      Dense(5, activation='tanh'),
      Dropout(0.2),
      Dense(3, activation='softmax')
])
model.summary()

model.compile(Adam(learning_rate=0.0001), loss='categorical_crossentropy', metrics=['accuracy'])

def train():
 model.fit(X_train, Y_train, batch_size=10, epochs=1000, shuffle=True, verbose=2)

train()

model.evaluate(X_test,Y_test)

model.save('drive/MyDrive/ai_bot/dnn_bbreakout_gbpusd_h4')

def predict(msg):
  content = msg
  parts = content.split('&')
  symbol = ''
  for i in parts:
    if i.find('symbol') != -1:
      symbol = i.split('=')[1]
    if i.find('time') != -1 or i.find('symbol') != -1:
      continue
    split = i.split('=')[1]
    split = split.replace(']','')
    split = split.replace('Index: [','')
    dataset.append(float(split))
  dataset_copy = dataset
  X = np.array([dataset, dataset_copy])
  prediction = model.predict(X)
  return symbol,prediction

app = Flask('__name__')

@app.route('/<string:Prediction>', methods=['POST', 'GET'])
def predict(Prediction):
  return predict(Prediction)[0]+','+str(predict(Prediction)[1][0])


if __name__ == "__main__":
 app.secret_key = "170194"
 app.run(debug=False)

with open('predictions.csv', 'w') as f:
  f.write('Date,Predictions\n')

for i in range(len(prediction)):
  with open('predictions.csv', 'a') as f:
    f.write(dates[i]+','+str(prediction[i])+"\n")